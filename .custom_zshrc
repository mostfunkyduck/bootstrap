#!/usr/bin/env bash
# Don't use 'zsh' above, shellcheck and the lsp won't work
export ZSH="$HOME/.oh-my-zsh"
export ZSH_THEME="robbyrussell"
export plugins=(ag git colored-man-pages) # jack

# shellcheck disable=SC1091
source "$ZSH/oh-my-zsh.sh"

export PATH="/usr/local/bin:$PATH"

if [ -d "$HOME/.local/bin" ]; then
  export PATH="$PATH:$HOME/.local/bin"
fi

if [ -d "$HOME/bin" ]; then
  export PATH="$HOME/bin:$PATH"
fi
## Random hacks
get_notifier() {
  if command -v terminal-notifier &>/dev/null; then
    echo 'terminal-notifier'
  elif command -v notify-send &>/dev/null; then
    echo 'notify-send'
  else
    echo "cannot send notification! no notifier found!" >&2
    echo ""
    return
  fi
}
send_notification() {
  title=$1
  shift
  cmd=$(get_notifier)
  case "$cmd" in
    "notify-send")
      notify-send -- "$title" "$@"
      ;;
    "terminal-notifier")
      terminal-notifier -- -message "$title completed" -sound default
      ;;
    *)
      echo "unsupported notifier"
      ;;
  esac
}
# mac commands to send notification after running process
notify_after() {
  local cmd
  cmd="$1"
  if [ -z "$cmd" ]; then
    >&2 echo "this function will run a command and notify you when it completes"
    >&2 echo "usage: $0 <command>"
    return
  fi
  OLDIFS="$IFS"
  IFS=" "
  # shellcheck disable=SC2064
  trap "send_notification \"$*\" \"completed: (\$?)\"" EXIT
  IFS="$OLDIFS"
  "$@"
}

notify_after_existing() {
  local pid
  pid="$1"
  if [ -z "$pid" ]; then
    >&2 echo "this function will notify you when a given pid terminates"
    >&2 echo "usage: $0 <pid>"
    return
  fi
  cmd="$(ps -o cmd= "$pid" | tr -d "\n")"
  # shellcheck disable=SC2064
  trap "send_notification \"$cmd (pid: $pid)\" \"completed\"" EXIT

  echo "waiting for $pid ($cmd) to terminate"
  ps "$pid"
  while true; do
    ps "$pid" &>/dev/null || break
    sleep 1
  done
}

get_gitignore () {
  local arg
  arg=$1
  if [ -z "$arg" ]; then
    echo "usage: $0 <desired template in github/gitignore repo>"
    return
  fi
  # this is some zsh magic
  # shellcheck disable=SC2296
  curl "https://raw.githubusercontent.com/github/gitignore/main/${(C)arg}.gitignore"
}

## Git hacks
in_git () {
  git rev-parse --git-dir > /dev/null 2>&1
}

git_branch () {
  git branch 2> /dev/null | grep '\*' | sed "s/* //"
}

git_rev () {
  git show 2>/dev/null | head -1 | awk '{print $NF}' | cut -c 1-10
}

# pass this the number of items and the action, e.g "colorize_git_output (<command>, "tweaked")"
colorize_git_output () {
  if [[ $1 -ge 1 ]]; then
    echo -e "%F{red}$1 $2%f"
  else
    echo -e "%F{green}$1 $2%f"
  fi

}
parse_git_renamed () {
  local RENAMED
  RENAMED=$(echo "$1" | grep -c "^R")
  colorize_git_output "$RENAMED" "renamed"
}

parse_git_modified () {
  local MODIFIED
  MODIFIED=$(echo "$1" | grep -c "^[ R]*M")
  colorize_git_output "$MODIFIED" "modified"
}

parse_git_staged () {
  local STAGED
  # M = staged, MM = staged and unstaged commits, A = staged and added, R = renamed and added
  STAGED=$(echo "$1" | grep -c "^[MAR]")
  colorize_git_output "$STAGED" "staged"
}

parse_untracked_files () {
  local UNTRACKED
  UNTRACKED=$(echo "$1" | grep -c "^??")
  colorize_git_output "$UNTRACKED" "untracked"
}

parse_unstaged_commits () {
  local UNSTAGED
  UNSTAGED=$(echo "$1" | grep -c "^[ R]M")
  colorize_git_output "$UNSTAGED" "unstaged"
}

parse_deleted_files () {
  local DELETED
  DELETED=$(echo "$1" | grep -c "^ D")
  colorize_git_output "$DELETED" "deleted"
}

parse_branch_ahead () {
  local VAL
  VAL=$(echo "$1" | grep -c "^##.*ahead ")
  if [[ $VAL -ge 1 ]]; then
    echo -e "%F{red}P%f"
  else
    echo -e "%F{green}C%f"
  fi
}
git_repo () {
  basename "$(git rev-parse --show-toplevel)"
}

git_prompt () {
  local STATUS
  if in_git; then
    STATUS=$(git status --porcelain -b 2>/dev/null)
    echo "($(git_repo): $(git_branch) [$(parse_branch_ahead "${STATUS}")] | $(parse_git_modified "${STATUS}") | $(parse_untracked_files "${STATUS}") | $(parse_unstaged_commits "${STATUS}") | $(parse_git_staged "${STATUS}") | $(parse_deleted_files "${STATUS}") | $(parse_git_renamed "${STATUS}") )"
  fi
}

get_number_of_jobs () {
  jobs | wc -l | tr -d " "
}

show_aws_profile () {
  [ "$AWS_PROFILE" ] && echo "[%F{yellow}$AWS_PROFILE%f]"
  [ "$AWS_VAULT" ] && echo "[%F{blue}$AWS_VAULT%f]"
}

# shellcheck disable=SC2034
NEWLINE=$'\n'
# shellcheck disable=all
PROMPT='s:[$SHLVL] j:[%j]$(echo "\t") %n %F{green}(%d)%f %F{blue}%D{%Y/%m/%d}%f %F{cyan}%*%f $(show_aws_profile) $(in_git && echo && git_prompt 2>/dev/null )${NEWLINE} > '

set -o vi

wait_for_ssh () {
  until nc -vz -w1 "$1" 22; do
    sleep 1;
  done
}

export VISUAL=nvim
export EDITOR="$VISUAL"

# FZF/GIT, YO!
alias git_log_fzf="git log --oneline | fzf --multi --preview 'git show {+1}'"

# delete aws-vault sessions without risking removal of a profile by omission of the cli arg
remove_aws_vault_sessions() {
  aws-vault remove "$1" --sessions-only
}

alias ls='ls -FG'
alias python=python3
# shellcheck disable=SC1091
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

export NVM_DIR="$HOME/.nvm"
# shellcheck disable=SC1091
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
# shellcheck disable=SC1091
[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion


if command -v kubectl &>/dev/null; then
  # shellcheck disable=SC1091
  KUBECTL_COMPLETIONS_FILE="$HOME/.kube/completion.zsh.inc"
  if [ -f "$KUBECTL_COMPLETIONS_FILE" ]; then
    # shellcheck disable=SC1091
    source "$HOME/.kube/completion.zsh.inc"
  fi
fi

if command -v gem &>/dev/null; then
  PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH"
  export PATH
fi

if [ -d /home/linuxbrew ]; then
  # linuxbrew is installed
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

if command -v bat &>/dev/null; then
  PAGER=bat
  export PAGER
fi
#

export HOMEBREW_BREWFILE="$HOME/.Brewfile"
export HOMEBREW_BUNDLE_FILE="$HOME/.Brewfile"


# shellcheck disable=SC1090
command -v gh &>/dev/null && source <(gh completion -s zsh)
autoload -U compinit
compinit -i

if command -v "$HOME"/.local/bin/gpt >/dev/null && [ -f "$HOME/.openai/api-key" ] ; then
  alias g='OPENAI_API_KEY=$(cat $HOME/.openai/api-key) $HOME/.local/bin/gpt'
  alias gbp='g bash --prompt'
fi

if command -v xclip &>/dev/null; then
  alias xc='xclip -sel clipboard'
fi

if [ -d "$HOME/adb-fastboot/platform-tools" ] ; then
 export PATH="$HOME/adb-fastboot/platform-tools:$PATH"
fi

for cmd in tailscale kubectl helm; do
  #shellcheck disable=SC1090
  command -v "$cmd" >/dev/null 2>&1 && source <("$cmd" completion zsh)
done
# vim: ft=sh
